import{_ as i,c as a,o as s,a3 as e}from"./chunks/framework.COm4hYgr.js";const u=JSON.parse('{"title":"Input","description":"","frontmatter":{},"headers":[],"relativePath":"docs/scripting/input.md","filePath":"docs/scripting/input.md","lastUpdated":1715343935000}'),t={name:"docs/scripting/input.md"},n=e(`<h1 id="input" tabindex="-1">Input <a class="header-anchor" href="#input" aria-label="Permalink to &quot;Input&quot;">​</a></h1><p>Input handling is the ability to listen and react to key strikes, mouse movements, and other physical input.</p><div class="tip custom-block"><p class="custom-block-title">Hammerstone Edition™</p><p>We recommend you use Hammerstone for managing input. You can find the Hammerstone docs <a href="/hammerstone/systems/input-manager.html">here</a>.</p></div><h2 id="adding-your-action-to-the-keymap" tabindex="-1">Adding your action to the keyMap <a class="header-anchor" href="#adding-your-action-to-the-keymap" aria-label="Permalink to &quot;Adding your action to the keyMap&quot;">​</a></h2><p>The first step is overwriting <code>scripts/mainThread/keyBinding.lua</code>. I think it&#39;s also possible to add bindings from other files, but I think there may be an ordering dependency here, so I suggest overwriting in-place.</p><h3 id="api" tabindex="-1">API <a class="header-anchor" href="#api" aria-label="Permalink to &quot;API&quot;">​</a></h3><p>There is a mod-exposed api:</p><ul><li><code>keyMapping</code></li><li><code>doubleMapping</code></li><li><code>addGroup</code></li><li><code>addMapping</code></li></ul><h3 id="example" tabindex="-1">Example <a class="header-anchor" href="#example" aria-label="Permalink to &quot;Example&quot;">​</a></h3><p>Here is a sample code, which adds a custom keybinding:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">function</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;"> mod</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">onload</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyMapping)</span></span>
<span class="line"><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">	keyMapping.</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addMapping</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(</span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;game&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#032F62;--shiki-dark:#9ECBFF;">&quot;testBinding&quot;</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, keyMapping.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyCodes</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">f5</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">, </span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">nil</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span>
<span class="line"><span style="--shiki-light:#D73A49;--shiki-dark:#F97583;">end</span></span></code></pre></div><h2 id="listening-to-your-action" tabindex="-1">Listening to your Action <a class="header-anchor" href="#listening-to-your-action" aria-label="Permalink to &quot;Listening to your Action&quot;">​</a></h2><p>The next step is actually listening to your action. This can by adding an event listener to the game&#39;s <code>eventManager</code>:</p><div class="language-lua vp-adaptive-theme"><button title="Copy Code" class="copy"></button><span class="lang">lua</span><pre class="shiki shiki-themes github-light github-dark vp-code"><code><span class="line"><span style="--shiki-light:#6A737D;--shiki-dark:#6A737D;">-- Yes, the code is intentionally misspelt</span></span>
<span class="line"><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">eventManager</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">:</span><span style="--shiki-light:#005CC5;--shiki-dark:#79B8FF;">addEventListenter</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">(keyChangedCallback, eventManager.</span><span style="--shiki-light:#6F42C1;--shiki-dark:#B392F0;">keyChangedListeners</span><span style="--shiki-light:#24292E;--shiki-dark:#E1E4E8;">)</span></span></code></pre></div>`,14),p=[n];function l(h,o,d,r,k,c){return s(),a("div",null,p)}const y=i(t,[["render",l]]);export{u as __pageData,y as default};
