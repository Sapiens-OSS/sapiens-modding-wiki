import{_ as e,c as a,o as t,a4 as o}from"./chunks/framework.qL1yNBZ5.js";const b=JSON.parse('{"title":"DDAPI Remaps","description":"","frontmatter":{},"headers":[],"relativePath":"hammerstone/ddapi/ddapi-remaps.md","filePath":"hammerstone/ddapi/ddapi-remaps.md","lastUpdated":1714807325000}'),r={name:"hammerstone/ddapi/ddapi-remaps.md"},s=o('<h1 id="ddapi-remaps" tabindex="-1">DDAPI Remaps <a class="header-anchor" href="#ddapi-remaps" aria-label="Permalink to &quot;DDAPI Remaps&quot;">​</a></h1><p>This page provides Hammerstone alternatives to shadowing base lua files. If a file isn&#39;t listed here, you likely need to create it, shadow it, and interact with Sapiens base code normally.</p><h3 id="gameobject-lua" tabindex="-1">gameObject.lua <a class="header-anchor" href="#gameobject-lua" aria-label="Permalink to &quot;gameObject.lua&quot;">​</a></h3><p>Every &#39;thing&#39; in Sapiens must be registered as a game object. For example; apple, mammoth, and fireplace are all game-objects.</p><p>Hammerstone: <code>hammerstone:object_definition/hs_object</code></p><h3 id="resource-lua" tabindex="-1">resource.lua <a class="header-anchor" href="#resource-lua" aria-label="Permalink to &quot;resource.lua&quot;">​</a></h3><p>A resource is like a &#39;category&#39; for game objects. For example &#39;apple&#39; resource might contain &#39;apple&#39;, &#39;rotten_apple&#39; and &#39;crab_apple&#39;.</p><p>Hammerstone: <code>hammerstone:object_definition/hs_resource</code></p><h3 id="craftable-lua" tabindex="-1">craftable.lua <a class="header-anchor" href="#craftable-lua" aria-label="Permalink to &quot;craftable.lua&quot;">​</a></h3><p>A craftable is a &quot;recipe&quot; for creating new game objects by combining or working with other game objects. For example you can craft &#39;campfireRoastedBeetroot&#39; by roasting beets at a campfire.</p><p>Hammerstone: <code>hammerstone:recipe_definition</code></p><h3 id="evolvingobject-lua" tabindex="-1">evolvingObject.lua <a class="header-anchor" href="#evolvingobject-lua" aria-label="Permalink to &quot;evolvingObject.lua&quot;">​</a></h3><p>Evolving objects are &#39;transformations&#39; of existing objects. For example meat may become rotten, or hay may become dry. Evolving objects also allow despawning, such as rotten meat, which removes itself after some time.</p><p>Hammerstone: <code>hammerstone:object_definition/hs_evolving_object</code></p><h3 id="harvestable-lua" tabindex="-1">harvestable.lua <a class="header-anchor" href="#harvestable-lua" aria-label="Permalink to &quot;harvestable.lua&quot;">​</a></h3><p>Harvestables are in-game objects which can be &quot;harvested&quot; for resources. The most common example would be animal carcases.</p><p>Hammerstone: <code>hammerstone:object_definition/hs_harvestable</code></p><h3 id="storage-lua" tabindex="-1">storage.lua <a class="header-anchor" href="#storage-lua" aria-label="Permalink to &quot;storage.lua&quot;">​</a></h3><p>Storage file in Sapiens defines both the &#39;carry&#39; logic for an item, as well as it&#39;s ability to be stored in storage areas.</p><p>Hammerstone: <code>hammerstone:storage_definition</code></p><h3 id="object-sets-servergom-lua" tabindex="-1">Object Sets (serverGOM.lua) <a class="header-anchor" href="#object-sets-servergom-lua" aria-label="Permalink to &quot;Object Sets (serverGOM.lua)&quot;">​</a></h3><p>Object Sets are like &#39;groupings&#39; for objects, such as all mobs, or all lit campfires. These object sets can be used to run some logic in other systems.</p><p>Hammerstone: <code>hammerstone:global_definitions/hs_object_sets</code></p><h2 id="no-remaps" tabindex="-1">No Remaps <a class="header-anchor" href="#no-remaps" aria-label="Permalink to &quot;No Remaps&quot;">​</a></h2><p>These files don&#39;t currently have a &#39;DDAPI&#39; solution. In these cases, you should just define them normally:</p><ul><li>animations.lua</li><li>sapienObjectSnapping.lua</li></ul>',26),i=[s];function l(n,c,m,d,h,p){return t(),a("div",null,i)}const f=e(r,[["render",l]]);export{b as __pageData,f as default};
